1.auth-code-server [Authorization Code Grant Type]

  	Steps : 1.in browser : http://localhost:8080/oauth/authorize?client_id=clientapp&redirect_uri=http://localhost:9000/callback&response_type=code&scope=read_profile
  		    2.after authorization -> get the code from redirect link : http://localhost:9000/callback?code=ww7ooy
  		    3.obtain access token with the following command : 		curl -X POST --user clientapp:123456 http://localhost:8080/oauth/token -H "content-type: application/x-www-form-urlencoded" -d
																	"code=[insert redirect code here without brackets]&grant_type=authorization_code&redirect_uri=http%3A%2F%2Flocalh
																	ost%3A9000%2Fcallback&scope=read_profile" 
			4.use access token from response : curl --header "Authorization: Bearer de8b2275-d037-48ca-a982-d593d825d7e8" http://localhost:8080/api/profile



2.implicit-server [Implicit Grant Type]

	Steps : 1.in browser : http://localhost:8080/oauth/authorize?client_id=clientapp&redirect_uri=http://localhost:9000/callback&response_type=token&scope=read_profile&state=xyz
			2.get the access token from response : http://localhost:9000/callback#access_token=537239af-e5a4-42ae-8a6c-4e228b7f82f2&token_type=bearer&state=xyz&expires_in=119
			3.curl --header "Authorization: Bearer 8bc19fe3-9b2f-4456-8cb0-91cb49be13c0" http://localhost:8080/api/profile


3.password-sever [Resource Owner Password Credentials grant type] 

	Steps : 1.curl -u client_id:client_secret --data "grant_type=password&username=adolfo&password=123" -X POST -H "Content-Type:application/x-www-form-urlencoded" http://localhost:8080/oauth/token
			2.from response extract the access token and use it in the next request 
			3.curl "http://localhost:8080/api/users" -H "Authorization: Bearer 8bc19fe3-9b2f-4456-8cb0-91cb49be13c0"

4.client-credentials-server [Client Credentials grant type]

	Steps : 1.curl -X POST "http://localhost:8080/oauth/token" --user clientadmin:123 -d "grant_type=client_credentials&scope=admin"
			2.from response extract the access token and use it in the next request 
			3.curl "http://localhost:8080/api/users" -H "Authorization: Bearer 8bc19fe3-9b2f-4456-8cb0-91cb49be13c0"

5.refresh-server [Adding support for refresh tokens]
	
	Steps : 1.in browser : http://localhost:8080/oauth/authorize?client_id=clientapp&redirect_uri=http://localhost:9000/callback&response_type=code&scope=read_profile
  		    2.after authorization -> get the code from redirect link : http://localhost:9000/callback?code=ww7ooy
  		    3.obtain access token with the following command : 		curl -X POST --user clientapp:123456 http://localhost:8080/oauth/token -H "content-type: application/x-www-form-urlencoded" -d
																	"code=[insert redirect code here without brackets]&grant_type=authorization_code&redirect_uri=http%3A%2F%2Flocalh
																	ost%3A9000%2Fcallback&scope=read_profile" 
			4.use access token from response : curl --header "Authorization: Bearer 15893509-6eb1-40ec-8244-345a137e7934" http://localhost:8080/api/profile 


6.rdbm-server [Using a relational database to store tokens and client details]
	
	Steps : 1.configure MySQL with the scripts from page 93
			2.use steps from Authorization Code Grant Type in order to retrieve an access token

7.redis-server [Using Redis as a token store]
	
	Steps : 1.configure Redis on Windows --- https://github.com/MicrosoftArchive/redis/releases
			2.use steps from Authorization Code Grant Type in order to retrieve an access token

8. authorization-server-initial
   resource-server       
   [Breaking the OAuth 2.0 Provider in the middle]
	
	Steps : 1.in order to generate an access token follow the steps from Authorization Code Grant Type
			2.use the access token to access resources from Resource Server : curl "http://localhost:8081/api/profile" -H "Authorization: Bearer 8bc19fe3-9b2f-4456-8cb0-91cb49be13c0"


